# Gemini Browser Control Interface

This document explains how to control the browser window through the Gemini CLI interface.

## Browser Control Commands

All browser commands must be prefixed with `!browser` followed by the command:


1. Navigation Commands
Command	Example	Description
navigate [url]	!browser navigate https://google.com	Loads a specified URL
back	!browser back	Goes back to previous page
forward	!browser forward	Goes forward to next page
refresh	!browser refresh	Reloads current page
2. DOM Interaction Commands
Command	Example	Description
click [selector]	!browser click #submit-btn	Clicks an element
input [selector] [text]	!browser input #search "AI"	Enters text into an input field
select [selector] [value]	!browser select #country "US"	Selects dropdown option
hover [selector]	!browser hover .menu-item	Hovers over an element
3. Inspection Commands
Command	Example	Description
get [selector]	!browser get .product	Returns element details (tag, classes, bounds, etc.)
exists [selector]	!browser exists .login-form	Checks if element exists
text [selector]	!browser text h1	Gets element's text content
html [selector]	!browser html .container	Gets element's inner HTML
screenshot [selector?]	!browser screenshot #hero	Captures element/page screenshot
4. JavaScript Execution
Command	Example	Description
eval [js-code]	!browser eval document.title	Executes JavaScript
scroll [x] [y]	!browser scroll 0 500	Scrolls to position
scrollTo [selector]	!browser scrollTo footer	Scrolls element into view
5. Page State Commands
Command	Example	Description
url	!browser url	Gets current URL
title	!browser title	Gets page title
cookies	!browser cookies	Lists all cookies
localStorage	!browser localStorage	Gets localStorage contents
6. Utility Commands
Command	Example	Description
wait [ms]	!browser wait 2000	Waits specified milliseconds
waitFor [selector]	!browser waitFor .loaded	Waits for element to appear
history	!browser history	Shows navigation history
viewport [width] [height]	!browser viewport 1024 768	Resizes browser window
7. Advanced Commands
Command	Example	Description
xpath [xpath]	!browser xpath //button[@id='submit']	Uses XPath selector
upload [selector] [path]	!browser upload #file-input ./test.pdf	Uploads a file
download [url]	!browser download https://example.com/file.pdf	Triggers download



Usage Examples
1. E-commerce Checkout Automation


!browser navigate https://shop.example.com
!browser click .product-card:first-child
!browser click #add-to-cart
!browser wait 1000
!browser click #checkout-button
!browser input #email "user@example.com"
!browser input #credit-card "4111111111111111"
!browser click #place-order
2. Data Extraction


!browser navigate https://news.ycombinator.com
!browser get .titleline => $titles
!browser eval $titles.map(t => t.textContent)
3. Form Testing


!browser navigate https://example.com/contact
!browser input #name "Test User"
!browser input #message "This is a test message"
!browser screenshot #form-section => $formScreenshot
!browser click #submit
!browser waitFor .success-message

OBSERVATION SPACE: FRAME BUFFER and !browser get *
ACTION SPACE: navigate, input and click


_________
# Browser Control Interface

You can control a browser using !browser commands. Simply state the commands in your response.

## Available Commands

### Navigation
- `!browser navigate [url]` - Navigate to a URL

### Interaction  
- `!browser click [selector]` - Click an element using CSS selector
- `!browser input [selector] [text]` - Input text into an element
- `!browser action [actionIndex] [actionType] [inputValue]` - Perform action on element by index

### Inspection
- `!browser get [selector]` - Get element details using CSS selector
- `!browser screenshot` - Take a full page screenshot
- `!browser observe` - Get comprehensive page observation with interactive elements
- `!browser annotated-screenshot` - Take screenshot with element annotations
- `!browser action-space` - List all actionable elements with indices

### JavaScript Execution
- `!browser evaluate [js-code]` - Execute JavaScript code in the page context

## Usage Rules

**IMPORTANT**: Only output the raw !browser commands - no code blocks, backticks, or formatting
- Use CSS selectors for elements (#id, .class, tag)
- Chain commands by stating them sequentially on separate lines
- `input` command automatically triggers input and change events
- `get` returns element details (tag, id, class, text, attributes, bounding rect)
- `screenshot` saves PNG to temp directory and returns file path
- Do not wrap commands in markdown, quotes, or any special characters

## Advanced Action System

### Element-Based Actions
The browser maintains an indexed list of actionable elements. Use these commands for precise interaction:

- `!browser observe` - Returns page observation with all interactive elements
- `!browser action-space` - Get summary of actionable elements with their indices
- `!browser action [index] click` - Click element at specific index
- `!browser action [index] type [text]` - Type text into input element at index
- `!browser action [index] select [value]` - Select option in dropdown at index

### Observation Data Structure
`!browser observe` returns:
```
{
  url: current page URL,
  title: page title,
  elements: [
    {
      index: element index for actions,
      tag: HTML tag name,
      text: visible text content (first 100 chars),
      attributes: { id, class, type, href, role },
      bounds: { x, y, width, height }
    }
  ]
}
```

### Action Space Structure  
`!browser action-space` returns:
```
{
  total_actions: number of actionable elements,
  action_types: {
    clickable: count of clickable elements,
    inputs: count of input fields,
    selects: count of dropdown selects
  },
  elements: [
    {
      index: action index,
      type: 'click'|'type'|'select',
      description: element description,
      tag_name: HTML tag,
      bounding_box: { x, y, width, height }
    }
  ]
}
```

### Annotated Screenshots
`!browser annotated-screenshot` returns:
```
{
  screenshot: base64 encoded image,
  observation: complete page observation data,
  timestamp: capture timestamp
}
```

## Action Types

1. **click** - For buttons, links, checkboxes, radio buttons, clickable elements
2. **type** - For text inputs, textareas, password fields  
3. **select** - For dropdown select elements

## Example Workflows

### Basic Navigation and Interaction
```
!browser navigate https://example.com
!browser click .login-button
!browser input #username john@example.com
!browser input #password mypassword
!browser click input[type="submit"]
```

### Advanced Element-Based Interaction
```
!browser navigate https://example.com
!browser observe
!browser action-space
!browser action 5 click
!browser action 12 type "search query"
!browser action 8 select "option-value"
```

### Inspection and Analysis
```
!browser screenshot
!browser get h1
!browser evaluate document.title
!browser annotated-screenshot
```

## Action Space Integration

- Elements are automatically indexed based on visibility and interactivity
- Actionable elements include: buttons, links, inputs, selects, clickable elements
- Use `observe` to understand page structure before taking actions
- Use `action-space` to see all available interaction points
- Use `action [index] [type] [value]` for precise element targeting

**Action Space**: navigate, click, input, get, screenshot(SAVED IN /tmp), evaluate, observe, annotated-screenshot(DONT USE), action-space, action

**Observation Space**: Frame buffer, element details from `get`, comprehensive page data from `observe`, annotated screenshots with element mapping, and actionable element indices from `action-space`
_____
example actions
ACTION: go to cnn and get all button information. respond clearly with information on these buttons
ACTION: go on youtube, get all available elems look at said elems and determine which to click to get into a video
